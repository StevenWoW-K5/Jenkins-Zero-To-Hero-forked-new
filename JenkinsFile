pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }

      //options {
          //skipDefaultCheckout() // Skip the default checkout step in Declarative Pipelines
      //}
  stages {
          stage('Hello11') {
              steps {
              sh 'pwd'
                  checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '8c0b4de7-ab96-4d0e-9eec-a561ee4a5b6e', url: 'git@github.com:StevenWoW-K5/Jenkins-Zero-To-Hero-forked-Deployment.git']])
                  sh 'ls -ltr -a'
              }
          }



          stage('Checkout') {
                steps {
                  sh 'echo passed'
                  //git branch: 'main', url: 'git@github.com:StevenWoW-K5/Jenkins-Zero-To-Hero-forked.git'
                  sh 'pwd'
                  checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'sshGithub', url: 'git@github.com:StevenWoW-K5/Jenkins-Zero-To-Hero-forked.git']])
                  sh 'pwd'
                  sh 'ls -ltr -a'
                }
              }
              stage('Build and Test') {
                steps {
                sh 'pwd'
                  sh 'ls -ltr -a'
                  // build the project and create a JAR file
                  sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                }
              }
              stage('Static Code Analysis') {
                environment {
                  SONAR_URL = "http://203.33.207.10:9000"
                }
                steps {
                  withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                   sh 'pwd'
                   sh 'ls -ltr -a'
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                  // Retrieve SonarQube analysis status
                      script {
                          def sonarqubeApiUrl = "http://203.33.207.10:9000/api/qualitygates/project_status?projectKey=com.k5:spring-boot-demo"
                          def sonarqubeResponse = sh(script: "curl -u admin:${sonarpwd} -s '$sonarqubeApiUrl'", returnStdout: true)
                          def sonarqubeStatus = readJSON(text: sonarqubeResponse).projectStatus.status

                          if (sonarqubeStatus == 'OK') {
                              echo "SonarQube analysis passed!"
                          } else {
                              error "SonarQube analysis failed!"
                          }
                      }
                  }
                }
              }
              stage('Build and Push Docker Image') {
                environment {
                  DOCKER_IMAGE = "rockuk/ultimate-cicd:${BUILD_NUMBER}"
                  // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                  REGISTRY_CREDENTIALS = credentials('docker-cred')
                }
                steps {
                  script {
                  sh 'pwd'
                  sh 'ls -ltr -a'
                      sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                      def dockerImage = docker.image("${DOCKER_IMAGE}")
                      docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                          dockerImage.push()
                      }
                  }
                }
              }
              stage('Update Deployment File') {
                  environment {
                      GIT_REPO_NAME = "Jenkins-Zero-To-Hero-forked"
                      GIT_USER_NAME = "StevenWoW-K5"
                  }
                  steps {
                      //withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                          //def oldPath = 'image: rockuk/ultimate-cicd:[\w.-]+'
                          //def newPath = 'image: rockuk/ultimate-cicd:${BUILD_NUMBER}'
                      script {
                          def oldPath = "image: rockuk/ultimate-cicd:[\\w.-]+"
                          def newPath = "image: rockuk/ultimate-cicd:${BUILD_NUMBER}"
                          sh 'pwd'
                          sh 'ls -ltr -a'
                          checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '8c0b4de7-ab96-4d0e-9eec-a561ee4a5b6e', url: 'git@github.com:StevenWoW-K5/Jenkins-Zero-To-Hero-forked-Deployment.git']])
                          sh 'pwd'
                          sh 'ls -ltr -a'
                          sh '''
                              git config user.email "stevenwu@163.com"
                              git config user.name "StevenWoW-K5"
                              BUILD_NUMBER=${BUILD_NUMBER}
                              ls -ltr

                              sed -i -E 's/image: rockuk\\/ultimate-cicd:([0-9.]+)/image: rockuk\\/ultimate-cicd:38/g' "spring-boot-app-manifests/deployment.yml"

                              git add spring-boot-app-manifests/deployment.yml
                              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                              git push
                          '''
                          //git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                          }
                      //}

                  }
              }
      }
}
